#Installation HOWTO

This tutorial describes the procedure for local build and install of libsetila library on a target platform. The build can be done using **Make** or **CMake** building tools. Both of them by default create a shared and static version of the library. If install option is used, the shared and static version of the library will be installed in /usr/local/lib while the header files will end up in /usr/local/headers/setila.
Those are the default search locations of GNU C/C++ compilers for headers and libraries so no extra linker arguments are required for linking with libsetila.

##Building libsetila with CMake

Building libsetila with CMake requires **cmake** tool installed on the system. If not present, in case of Raspbian OS and other Debian base Linux distributions can be installed using **apt-get** command:

 #sudo apt-get install cmake

Navigate to the directory where the libsetila source code resides.
Create a new folder called "build":

 #mkdir build

Create the build rules with:

 #cmake ..

Compile the library:

 #make

Two files will be created in the current folder as a result of the build: libsetila.so and libsetila.a.

You can copy those files to a desired location or they can be installed to the default one /usr/local/lib with:

 #sudo make install

The last step will copy also the headers in /usr/local/include/setila.
The list of files installed on your system is located in install_manifest.txt file generated by CMake.


##Building libsetila with Make

Navigate to the directory where the libsetila source code resides.

Compile the library:

 #make

This will create both versions of the library: static and shared.
Like with CMake, the installation is done with

 #sudo make install

###Extra build arguments for Make

Build only the shared version of the library:

 #make shared

Build only the static version of the library:

 #make static

## Post install step

After installing the library, update the system cash of shared libraries by executing the command:

 #sudo ldconfig

Now the library is ready for linking with other projects. 

##Clean up the build files

In both cases, the files created by the compiler can be removed by executing:

 #make clean


##Building examples (Make only)

For succesfull build of the provided examples, the library must be already installed in the default location. If not, change the Makefile accordingly.

Navigate to the source code of the example. For exampe:

 #cd examples/pi_sense_hat

Compile the example with:

 #make 

Start the executable:

 #./pi_sense_hat

If your user account does not have rights for accessing I2C/SPI device files, start the binary with sudo:

 #sudo ./pi_sense_hat

In case there is an error pointing out that the system cannot find libsetila, execute the "ldconfig" command as described above.

##Uninstall

###CMake Build

Navigate to the CMake build driectory from the first step of this manual.
Execute the following command:

 #sudo xargs rm < ./install_manifest.txt


###Make build

Navigate to the source folder of the libaray and execute:

 #sudo make uninstall
